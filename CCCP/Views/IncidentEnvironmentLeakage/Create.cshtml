@model CCCP.Business.Model.IncidentEnvironmentLeakageModel

@using CCCP.Common
@using CCCP.Business.Service
@{
    ViewBag.Title = Resources.global.Menu_IncidentEnvironmentLeakage;
    CCCP.ViewModel.IncidentEnvironmentLeakage incidentEnvironmentLeakage = Model.Entity; // variable for binding
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        <i class="fa fa-clipboard"></i> @Resources.global.Menu_IncidentManagement - @Resources.global.Func_Create @Resources.global.Menu_IncidentEnvironmentLeakage
    </h1>
</section>

<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-lg-12">
            <div class="box box-primary">
                <div class="box-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
					
					<div class="panel-group">
						<div class="panel panel-default">
							<div class="panel panel-body">
								@*<div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentEnvironmentLeakage.LevelOfSeverity)</label></div>
                                    <div class="col-lg-4">
                                        <select id="incidentEnvironmentLeakage_LevelOfSeverity" name="incidentEnvironmentLeakage.LevelOfSeverity" class="form-control thin-control">
                                            <option value=""></option>
                                            @foreach (IncidentLevel one in Enum.GetValues(typeof(IncidentLevel)))
                                            {
                                                if (one != IncidentLevel.None)
                                                {
                                                    <option value="@(Convert.ToInt32(one))">@one.ToEnumString()</option>
                                                }
                                            }
                                        </select>
                                        @Html.ValidationMessageFor(model => incidentEnvironmentLeakage.LevelOfSeverity, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@

								<div class="row">
									<div class="col-lg-1"></div>
									<div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentEnvironmentLeakage.IncidentBackground)</label></div>
									<div class="col-lg-4">
                                        @Html.EditorFor(model => incidentEnvironmentLeakage.IncidentBackground, new { htmlAttributes = new { @class = "form-control", @style = "height:150px" } })
										@Html.ValidationMessageFor(model => incidentEnvironmentLeakage.IncidentBackground, "", new { @class = "text-danger" })
									</div>
								</div>

								<div class="row">
									<div class="col-lg-1"></div>
									<div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentEnvironmentLeakage.IsDrillMode)</label></div>
									<div class="col-lg-4">
										<div class="checkbox">
											<input id="incidentEnvironmentLeakage_IsDrillMode" name="incidentEnvironmentLeakage.IsDrillMode" type="checkbox" value="" style="top:-10px; left: 20px" />
											@Html.ValidationMessageFor(model => incidentEnvironmentLeakage.IsDrillMode, "", new { @class = "text-danger" })
										</div>
									</div>
								</div>
							</div>
						</div>
						
						<div class="panel panel-primary">
							<div class="panel panel-heading"><label>@Resources.global.Label_Details</label></div>
							<div class="panel panel-body">

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentEnvironmentLeakage.Location)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentEnvironmentLeakage.Location, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentEnvironmentLeakage.Location, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentEnvironmentLeakage.PossibleCause)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentEnvironmentLeakage.PossibleCause, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentEnvironmentLeakage.PossibleCause, "", new { @class = "text-danger" })
                                    </div>
                                </div>

								<div class="row">
                                    <div class="col-lg-1"></div>
									<div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentEnvironmentLeakage.Damage)</label></div>
									<div class="col-lg-6">                                
										@Html.EditorFor(model => incidentEnvironmentLeakage.Damage, new { htmlAttributes = new { @class = "form-control thin-control" } })
										@Html.ValidationMessageFor(model => incidentEnvironmentLeakage.Damage, "", new { @class = "text-danger" })
									</div>
								</div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentEnvironmentLeakage.SourceOfInformation)</label></div>
                                    <div class="col-lg-6">
                                        <select id="incidentEnvironmentLeakage_SourceOfInformation" name="incidentEnvironmentLeakage.SourceOfInformation" class="form-control thin-control">
                                            <option value=""></option>
                                            @foreach (string one in Model.Options_SourceOfInformation)
                                            {
                                                <option value="@one">@one</option>
                                            }
                                        </select>
                                        @Html.ValidationMessageFor(model => incidentEnvironmentLeakage.SourceOfInformation, "", new { @class = "text-danger" })
                                    </div>
                                </div>

								<div class="row">
                                    <div class="col-lg-1"></div>
									<div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentEnvironmentLeakage.TypeOfLeakage)</label></div>
									<div class="col-lg-6">
                                        <div class="col-lg-6">
                                            <select id="TypeOfLeakage" name="TypeOfLeakage" class="form-control thin-control">
                                                <option value=""></option>
                                                @foreach (string one in Model.Options_TypeOfLeakage)
                                                {
                                                    <option value="@one">@one</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="col-lg-6" id="TypeOfLeakageOthers">
                                            <input id="TypeOfLeakageOthersMore" name="TypeOfLeakageOthersMore" type="text" value="" class="form-control thin-control text-box pull-right" />
                                        </div>
                                        @Html.HiddenFor(model => incidentEnvironmentLeakage.TypeOfLeakage)
										@Html.ValidationMessageFor(model => incidentEnvironmentLeakage.TypeOfLeakage, "", new { @class = "text-danger" })
									</div>
								</div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentEnvironmentLeakage.AffectedArea)</label></div>
                                    <div class="col-lg-6">
                                        <select id="incidentEnvironmentLeakage_AffectedArea" name="incidentEnvironmentLeakage.AffectedArea" class="form-control thin-control">
                                            <option value=""></option>
                                            @foreach (string one in Model.Options_AffectedArea)
                                            {
                                                <option value="@one">@one</option>
                                            }
                                        </select>
                                        @Html.ValidationMessageFor(model => incidentEnvironmentLeakage.AffectedArea, "", new { @class = "text-danger" })
                                    </div>
                                </div>
							</div>
						</div>
					</div>
                            
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.IncidentEnvironmentLeakageId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.ChecklistBatchId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.ChatRoomId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.GeneralEnquiryId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.CrisisId)
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.NotificationId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.IssueById)
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.IssueDateTime)
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.CloseById)
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.CloseDateTime)
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.IncidentNo)
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.IncidentStatus)
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.CreatedBy)
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.CreatedDateTime)
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.LastUpdatedBy)
                    @Html.HiddenFor(model => incidentEnvironmentLeakage.LastUpdatedDateTime)

                    <div class="box-footer">
                        <div class="form-group">
                            <button class="btn btn-primary" type="submit" id="btnCreate">@Resources.global.Func_Save</button>
                            <button class="btn btn-primary" type="button" onclick="window.location = '@Url.Action("Index", "IncidentEnvironmentLeakage")';">@Resources.global.Func_Cancel</button>
                        </div>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>

    $("#incidentEnvironmentLeakage_IsDrillMode").on("click", function () {
        $(this).val(this.checked);
    });

    $("#TypeOfLeakage").change(function () {
        if ($(this).val() == "@IncidentEnvironmentLeakageTypeOfLeakage.Others_9please_specify0.ToEnumString()") {
            $('#TypeOfLeakageOthers').show();
            $("#incidentEnvironmentLeakage_TypeOfLeakage").val($(this).val() + " (" + $("#TypeOfLeakageOthersMore").val() + ")");
        } else {
            $('#TypeOfLeakageOthers').hide();
            $("#incidentEnvironmentLeakage_TypeOfLeakage").val($(this).val());
        }
    });

    $("#TypeOfLeakageOthersMore").change(function () {
        $("#incidentEnvironmentLeakage_TypeOfLeakage").val($("#TypeOfLeakage").val() + " (" + $(this).val() + ")");
    });

    $(document).ready(function () {
        if ($('#TypeOfLeakage').val() == "@IncidentEnvironmentLeakageTypeOfLeakage.Others_9please_specify0.ToEnumString()") {
            $('#TypeOfLeakageOthers').show();
        } else {
            $('#TypeOfLeakageOthers').hide();
        }

        $("#incidentEnvironmentLeakage_IsDrillMode").val($("#incidentEnvironmentLeakage_IsDrillMode").checked);
    });

    $('#btnCreate').on('click', function (event) {
        var inputValid = true;
        var errMsg = '';

        if ($('#incidentEnvironmentLeakage_IncidentBackground').val() == '') {
            inputValid = false;
            errMsg = errMsg + 'Incident Background cannot be empty<br />';
        }

        if (inputValid == false) {
            $('#CCCPModal').find('.modal-body').html(errMsg);
            $('#CCCPModal').find('.modal-title').html('Validation Summary');
            $('#CCCPModal').modal('toggle');

            event.preventDefault();
        }

        return inputValid;
    });
</script>
}
