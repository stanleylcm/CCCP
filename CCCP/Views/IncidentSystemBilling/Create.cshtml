@model CCCP.ViewModel.IncidentSystemBilling

@using CCCP.Common
@{
    ViewBag.Title = Resources.global.Menu_IncidentSystemBilling;
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        <i class="fa fa-clipboard"></i> @Resources.global.Menu_IncidentManagement - @Resources.global.Func_Create @Resources.global.Menu_IncidentSystemBilling
    </h1>
</section>

<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-lg-12">
            <div class="box box-primary">
                <div class="box-body">
                    @using (Html.BeginForm("Create", "IncidentSystemBilling", FormMethod.Post, new { onsubmit="validateForm()" }))
                    {
                        @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="row">
                        <div class="col-lg-1"></div>
                        <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => model.IssueDateTime)</label></div>
                        <div class="col-lg-4">
                            @Html.EditorFor(model => model.IssueDateTime, new { htmlAttributes = new { @class = "form-control thin-control" } })
                            @Html.ValidationMessageFor(model => model.IssueDateTime, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-1"></div>
                        <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => model.IncidentBackground)</label></div>
                        <div class="col-lg-4">
                            @Html.EditorFor(model => model.IncidentBackground, new { htmlAttributes = new { @class = "form-control thin-control" } })
                            @Html.ValidationMessageFor(model => model.IncidentBackground, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-1"></div>
                        <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => model.IsDrillMode)</label></div>
                        <div class="col-lg-4">
                            <div class="checkbox">
                                <input id="IsDrillMode" name="IsDrillMode" type="checkbox" value="" style="top:-10px; left: 20px" />
                                @Html.ValidationMessageFor(model => model.IsDrillMode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Details</legend>

                        <div class="row">
                            <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => model.ProblemArea)</label></div>
                            <div class="col-lg-6">
                                <select id="ProblemArea" name="ProblemArea" class="form-control thin-control">
                                    <option value=""></option>
                                    @foreach (IncidentSystemBillingProblemArea one in Enum.GetValues(typeof(IncidentSystemBillingProblemArea)))
                                    {
                                    <option value="@one.ToEnumString()">@one.ToEnumString()</option>
                                    }
                                </select>
                                @Html.ValidationMessageFor(model => model.ProblemArea, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => model.PossibleCause)</label></div>
                            <div class="col-lg-6">
                                <select id="PossibleCause" name="PossibleCause" class="form-control thin-control">
                                    <option value=""></option>
                                    @foreach (IncidentSystemBillingPossibleCause one in Enum.GetValues(typeof(IncidentSystemBillingPossibleCause)))
                                    {
                                    <option value="@one.ToEnumString()">@one.ToEnumString()</option>
                                    }
                                </select>
                                @Html.ValidationMessageFor(model => model.PossibleCause, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => model.BillingErrorSeriousness)</label></div>
                            <div class="col-lg-6">
                                <select id="BillingErrorSeriousness" name="BillingErrorSeriousness" class="form-control thin-control">
                                    <option value=""></option>
                                    @foreach (IncidentSystemBillingBillingErrorSeriousness one in Enum.GetValues(typeof(IncidentSystemBillingBillingErrorSeriousness)))
                                    {
                                    <option value="@one.ToEnumString()">@one.ToEnumString()</option>
                                    }
                                </select>
                                @Html.ValidationMessageFor(model => model.BillingErrorSeriousness, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => model.ExpectedAffectedCustomerBill)</label></div>
                            <div class="col-lg-6">
                                @Html.EditorFor(model => model.ExpectedAffectedCustomerBill, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                @Html.ValidationMessageFor(model => model.ExpectedAffectedCustomerBill, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => model.ContactedBy)</label></div>
                            <div class="col-lg-6">
                                @{
                                    int countContactedBy = 0;
                                    foreach (IncidentSystemBillingContactedBy one in Enum.GetValues(typeof(IncidentSystemBillingContactedBy)))
                                    {
                                <input id="ContactedBy@(countContactedBy.ToString())" type="checkbox" value="@one.ToEnumString()" /><label for="ContactedBy@(countContactedBy.ToString())"> @one.ToEnumString()</label><br />
                                        countContactedBy++;
                                    }
                                }
                                <input type="hidden" id="ContactedBy" name="ContactedBy" value="" />
                                @Html.ValidationMessageFor(model => model.ContactedBy, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-3 text-right"><labe class="mandatory-field" l>@Html.DisplayNameFor(model => model.Impact)</label></div>
                            <div class="col-lg-6">
                                @Html.EditorFor(model => model.Impact, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                @Html.ValidationMessageFor(model => model.Impact, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => model.StatusUpdate)</label></div>
                            <div class="col-lg-6">
                                <select id="StatusUpdate" name="StatusUpdate" class="form-control thin-control">
                                    <option value=""></option>
                                    @foreach (IncidentSystemBillingStatusUpdate one in Enum.GetValues(typeof(IncidentSystemBillingStatusUpdate)))
                                    {
                                    <option value="@one.ToEnumString()">@one.ToEnumString()</option>
                                    }
                                </select>
                                @Html.ValidationMessageFor(model => model.StatusUpdate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => model.RequireMitigatingAction)</label></div>
                            <div class="col-lg-6">
                                <select id="RequireMitigatingAction" name="RequireMitigatingAction" class="form-control thin-control">
                                    <option value=""></option>
                                    @foreach (IncidentSystemBillingRequireMitigatingAction one in Enum.GetValues(typeof(IncidentSystemBillingRequireMitigatingAction)))
                                    {
                                    <option value="@one.ToEnumString()">@one.ToEnumString()</option>
                                    }
                                </select>
                                @Html.ValidationMessageFor(model => model.RequireMitigatingAction, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => model.MitigatingAction)</label></div>
                            <div class="col-lg-6">
                                @{
                                    int countMitigatingAction = 0;
                                    foreach (IncidentSystemBillingMitigatingAction one in Enum.GetValues(typeof(IncidentSystemBillingMitigatingAction)))
                                    {
                                        <input id="MitigatingAction@(countMitigatingAction.ToString())" type="checkbox" value="@one.ToEnumString()" /><label for="MitigatingAction@(countMitigatingAction.ToString())"> @one.ToEnumString()</label>
                                        if (one != IncidentSystemBillingMitigatingAction.Others)
                                        { 
                                        <br />
                                        }
                                        else
                                        {
                                        <input id="MitigatingAction@(one)More" name="MitigatingAction@(one)More" type="text" value="" class="form-control thin-control text-box pull-right" style="width:70%" />
                                        }
                                        countMitigatingAction++;
                                    }
}
                                <input type="hidden" id="MitigatingAction" name="MitigatingAction" value="" />
                                @Html.ValidationMessageFor(model => model.MitigatingAction, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </fieldset>
                            
                    @Html.HiddenFor(model => model.IncidentSystemBillingId, new { @Value = 0 })
                    @Html.HiddenFor(model => model.ChecklistBatchId, new { @Value = 0 })
                    @Html.HiddenFor(model => model.ChatRoomId, new { @Value = 0 })
                    @Html.HiddenFor(model => model.GeneralEnquiryId, new { @Value = 0 })
                    @Html.HiddenFor(model => model.CrisisId)
                    @Html.HiddenFor(model => model.NotificationId, new { @Value = 0 })
                    @Html.HiddenFor(model => model.IssueById)
                    @Html.HiddenFor(model => model.CloseById)
                    @Html.HiddenFor(model => model.CloseDateTime)
                    @Html.HiddenFor(model => model.IncidentNo)
                    @Html.HiddenFor(model => model.LevelOfSeverity)
                    @Html.HiddenFor(model => model.IncidentStatus)
                    @Html.HiddenFor(model => model.CreatedBy)
                    @Html.HiddenFor(model => model.CreatedDateTime)
                    @Html.HiddenFor(model => model.LastUpdatedBy)
                    @Html.HiddenFor(model => model.LastUpdatedDateTime)

                    <div class="box-footer">
                        <div class="btn-group">
                            <button class="btn btn-primary" type="submit">@Resources.global.Func_Create</button>
                            <button class="btn btn-primary" type="button" onclick="window.location = '@Url.Action("Index", "IncidentSystemBilling")';">@Resources.global.Func_Cancel</button>
                        </div>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $("input[type=checkbox][id^=ContactedBy]").on("click", function () {
            var sList = "";
            var i = 0;
            $("input[type=checkbox][id^=ContactedBy]").each(function(){
                if (this.checked) {
                    if (i == 0) {
                        sList = $(this).val();
                    } else {
                        sList = sList + ", " + $(this).val();
                    }
                    i++;
                }
            });
            $("#ContactedBy").val(sList);
        });

        $("input[type=checkbox][id^=MitigatingAction]").on("click", function () {
            var sList = "";
            var i = 0;
            $("input[type=checkbox][id^=MitigatingAction]").each(function () {
                if (this.checked) {
                    if (i == 0) {
                        sList = $(this).val();
                    } else {
                        sList = sList + ", " + $(this).val();
                    }
                    if ($(this).val() == "@(IncidentSystemBillingMitigatingAction.Others.ToEnumString())") {
                        sList = sList + " (" + $("#MitigatingAction@(IncidentSystemBillingMitigatingAction.Others)More").val() + ")";
                    }
                    i++;
                }
            });
            $("#MitigatingAction").val(sList);
        });

        $("#MitigatingAction@(IncidentSystemBillingMitigatingAction.Others)ore").change(function () {
            var sList = "";
            var i = 0;
            $("input[type=checkbox][id^=MitigatingAction]").each(function () {
                if (this.checked) {
                    if (i == 0) {
                        sList = $(this).val();
                    } else {
                        sList = sList + ", " + $(this).val();
                    }
                    if ($(this).val() == "@(IncidentSystemBillingMitigatingAction.Others.ToEnumString())") {
                        sList = sList + " (" + $("#MitigatingAction@(IncidentSystemBillingMitigatingAction.Others)More").val() + ")";
                    }
                    i++;
                }
            });
            $("#MitigatingAction").val(sList);
        });

        $("#IsDrillMode").on("click", function () {
            $(this).val(this.checked);
        });

        function validateForm(event) {
            event = event || window.event || event.srcElement;
            alert($("form").serialize());
            /*
            if (~~newMonoReading < ~~initialMonoReading) {
                $('#MonoErrorMessage').text("New Mono Readings must be MORE than existing");
                $('#MonoErrorMessage').show();
                event.preventDefault();
            }
            else {
                $('#MonoErrorMessage').hide();
            }
            */
        }

        $(function () {
            $('#form').submit(function () {
                // DO STUFF
                return true; // return false to cancel form action
            });
        });
</script>
}
