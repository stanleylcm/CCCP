@model CCCP.Business.Model.IncidentSystemITSystemModel

@using CCCP.Common
@using CCCP.Business.Service
@{
    ViewBag.Title = Resources.global.Menu_IncidentSystemITSystem;
    CCCP.ViewModel.IncidentSystemITSystem incidentSystemITSystem = Model.Entity; // variable for binding
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        <i class="fa fa-clipboard"></i> @Resources.global.Menu_IncidentManagement - @Resources.global.Func_Create @Resources.global.Menu_IncidentSystemITSystem
    </h1>
</section>

<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-lg-12">
            <div class="box box-primary">
                <div class="box-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
					
					<div class="panel-group">
						<div class="panel panel-default">
							<div class="panel panel-body">
								<div class="row">
									<div class="col-lg-1"></div>
									<div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentSystemITSystem.LevelOfSeverity)</label></div>
									<div class="col-lg-4">
										<select id="incidentSystemITSystem_LevelOfSeverity" name="incidentSystemITSystem.LevelOfSeverity" class="form-control thin-control">
											<option value=""></option>
											@foreach (IncidentLevel one in Enum.GetValues(typeof(IncidentLevel)))
											{
												if (one != IncidentLevel.None)
												{
													<option value="@(Convert.ToInt32(one))">@one.ToEnumString()</option>
												}
											}
										</select>
										@Html.ValidationMessageFor(model => incidentSystemITSystem.LevelOfSeverity, "", new { @class = "text-danger" })
									</div>
								</div>

								<div class="row">
									<div class="col-lg-1"></div>
									<div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentSystemITSystem.IncidentBackground)</label></div>
									<div class="col-lg-4">
										@Html.EditorFor(model => incidentSystemITSystem.IncidentBackground, new { htmlAttributes = new { @class = "form-control thin-control" } })
										@Html.ValidationMessageFor(model => incidentSystemITSystem.IncidentBackground, "", new { @class = "text-danger" })
									</div>
								</div>

								<div class="row">
									<div class="col-lg-1"></div>
									<div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentSystemITSystem.IsDrillMode)</label></div>
									<div class="col-lg-4">
										<div class="checkbox">
											<input id="incidentSystemITSystem_IsDrillMode" name="incidentSystemITSystem.IsDrillMode" type="checkbox" value="" style="top:-10px; left: 20px" />
											@Html.ValidationMessageFor(model => incidentSystemITSystem.IsDrillMode, "", new { @class = "text-danger" })
										</div>
									</div>
								</div>
							</div>
						</div>
						
						<div class="panel panel-primary">
							<div class="panel panel-heading"><label>@Resources.global.Label_Details</label></div>
							<div class="panel panel-body">

								<div class="row">
                                    <div class="col-lg-1"></div>
									<div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentSystemITSystem.Location)</label></div>
									<div class="col-lg-6">                                        
                                        @Html.EditorFor(model => incidentSystemITSystem.Location, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentSystemITSystem.Location, "", new { @class = "text-danger" })
									</div>
								</div>

								<div class="row">
                                    <div class="col-lg-1"></div>
									<div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentSystemITSystem.PossibleCause)</label></div>
									<div class="col-lg-6">
                                        @Html.EditorFor(model => incidentSystemITSystem.PossibleCause, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentSystemITSystem.PossibleCause, "", new { @class = "text-danger" })
									</div>
								</div>

								<div class="row">
                                    <div class="col-lg-1"></div>
									<div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentSystemITSystem.Damage)</label></div>
									<div class="col-lg-6">                                
										@Html.EditorFor(model => incidentSystemITSystem.Damage, new { htmlAttributes = new { @class = "form-control thin-control" } })
										@Html.ValidationMessageFor(model => incidentSystemITSystem.Damage, "", new { @class = "text-danger" })
									</div>
								</div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentSystemITSystem.AffectedSystem)</label></div>
                                    <div class="col-lg-6">
                                                                                @{
                                            int countAffectedSystem = 0;
                                            foreach (string one in Model.Options_AffectedSystem)
                                            {
                                                <input id="AffectedSystem@(countAffectedSystem.ToString())" type="checkbox" value="@one" /><label for="AffectedSystem@(countAffectedSystem.ToString())"> @one</label><br />
                                                countAffectedSystem++;
                                            }
                                        }
                                        <input type="hidden" id="incidentSystemITSystem_AffectedSystem" name="incidentSystemITSystem.AffectedSystem" value="" />
                                        @Html.ValidationMessageFor(model => incidentSystemITSystem.AffectedSystem, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentSystemITSystem.AffectedArea)</label></div>
                                    <div class="col-lg-6">
                                                                                @{
                                            int countAffectedArea = 0;
                                            foreach (string one in Model.Options_AffectedArea)
                                            {
                                                <input id="AffectedArea@(countAffectedArea.ToString())" type="checkbox" value="@one" /><label for="AffectedArea@(countAffectedArea.ToString())"> @one</label><br />
                                                countAffectedArea++;
                                            }
                                        }
                                        <input type="hidden" id="incidentSystemITSystem_AffectedArea" name="incidentSystemITSystem.AffectedArea" value="" />
                                        @Html.ValidationMessageFor(model => incidentSystemITSystem.AffectedArea, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentSystemITSystem.ExpectedRestorationTime)</label></div>
                                    <div class="col-lg-6">
                                        <div class="col-lg-6">
                                            <div class="input-group">
                                                <div class="input-group-addon">
                                                    <i class="fa fa-calendar"></i>
                                                </div>
                                                <input type="text" class="form-control" id="ExpectedRestorationTimeDate" data-inputmask="'alias': 'yyyy-mm-dd'" data-mask></input>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            <div class="input-group bootstrap-timepicker">
                                                <div class="input-group-addon">
                                                    <i class="fa fa-clock-o"></i>
                                                </div>
                                                <input type="text" class="form-control timepicker" id="ExpectedRestorationTimeTime" data-inputmask="'alias': 'hh:mm'" data-mask></input>
                                            </div>
                                        </div>
                                        @Html.HiddenFor(model => incidentSystemITSystem.ExpectedRestorationTime)
                                        @Html.ValidationMessageFor(model => incidentSystemITSystem.ExpectedRestorationTime, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentSystemITSystem.FullRestoration)</label></div>
                                    <div class="col-lg-6">
                                        <div class="col-lg-6">
                                            <div class="input-group">
                                                <div class="input-group-addon">
                                                    <i class="fa fa-calendar"></i>
                                                </div>
                                                <input type="text" class="form-control" id="FullRestorationDate" data-inputmask="'alias': 'yyyy-mm-dd'" data-mask></input>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            <div class="input-group bootstrap-timepicker">
                                                <div class="input-group-addon">
                                                    <i class="fa fa-clock-o"></i>
                                                </div>
                                                <input type="text" class="form-control timepicker" id="FullRestorationTime" data-inputmask="'alias': 'hh:mm'" data-mask></input>
                                            </div>
                                        </div>
                                        @Html.HiddenFor(model => incidentSystemITSystem.FullRestoration)
                                        @Html.ValidationMessageFor(model => incidentSystemITSystem.FullRestoration, "", new { @class = "text-danger" })
                                    </div>
                                </div>
							</div>
						</div>
					</div>
                            
                    @Html.HiddenFor(model => incidentSystemITSystem.IncidentSystemITSystemId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentSystemITSystem.ChecklistBatchId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentSystemITSystem.ChatRoomId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentSystemITSystem.GeneralEnquiryId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentSystemITSystem.CrisisId)
                    @Html.HiddenFor(model => incidentSystemITSystem.NotificationId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentSystemITSystem.IssueById)
                    @Html.HiddenFor(model => incidentSystemITSystem.IssueDateTime)
                    @Html.HiddenFor(model => incidentSystemITSystem.CloseById)
                    @Html.HiddenFor(model => incidentSystemITSystem.CloseDateTime)
                    @Html.HiddenFor(model => incidentSystemITSystem.IncidentNo)
                    @Html.HiddenFor(model => incidentSystemITSystem.IncidentStatus)
                    @Html.HiddenFor(model => incidentSystemITSystem.CreatedBy)
                    @Html.HiddenFor(model => incidentSystemITSystem.CreatedDateTime)
                    @Html.HiddenFor(model => incidentSystemITSystem.LastUpdatedBy)
                    @Html.HiddenFor(model => incidentSystemITSystem.LastUpdatedDateTime)

                    <div class="box-footer">
                        <div class="form-group">
                            <button class="btn btn-primary" type="submit" id="btnCreate">@Resources.global.Func_Create</button>
                            <button class="btn btn-primary" type="button" onclick="window.location = '@Url.Action("Index", "IncidentSystemITSystem")';">@Resources.global.Func_Cancel</button>
                        </div>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>

    $("input[type=checkbox][id^=AffectedSystem]").on("click", function () {
        var sList = "";
        var i = 0;
        $("input[type=checkbox][id^=AffectedSystem]").each(function () {
            if (this.checked) {
                if (i == 0) {
                    sList = $(this).val();
                } else {
                    sList = sList + ", " + $(this).val();
                }
                i++;
            }
        });
        $("#incidentSystemITSystem_AffectedSystem").val(sList);
    });

    $("input[type=checkbox][id^=AffectedArea]").on("click", function () {
        var sList = "";
        var i = 0;
        $("input[type=checkbox][id^=AffectedArea]").each(function () {
            if (this.checked) {
                if (i == 0) {
                    sList = $(this).val();
                } else {
                    sList = sList + ", " + $(this).val();
                }
                i++;
            }
        });
        $("#incidentSystemITSystem_AffectedArea").val(sList);
    });

    $("#incidentSystemITSystem_IsDrillMode").on("click", function () {
        $(this).val(this.checked);
    });

    $("#FullRestorationDate").change(function () {
        $("#incidentSystemITSystem_FullRestoration").val($("#FullRestorationDate").val() + " " + $("#FullRestorationTime").val());
    });

    $("#FullRestorationTime").change(function () {
        $("#incidentSystemITSystem_FullRestoration").val($("#FullRestorationDate").val() + " " + $("#FullRestorationTime").val());
    });

    $("#ExpectedRestorationTimeDate").change(function () {
        $("#incidentSystemITSystem_ExpectedRestorationTime").val($("#ExpectedRestorationTimeDate").val() + " " + $("#ExpectedRestorationTimeTime").val());
    });

    $("#ExpectedRestorationTimeTime").change(function () {
        $("#incidentSystemITSystem_ExpectedRestorationTime").val($("#ExpectedRestorationTimeDate").val() + " " + $("#ExpectedRestorationTimeTime").val());
    });

    $(document).ready(function () {
        $("#incidentSystemITSystem_IsDrillMode").val($("#incidentSystemITSystem_IsDrillMode").checked);

        $('#FullRestorationDate').datepicker({ dateFormat: 'yy-mm-dd' });
        $('#ExpectedRestorationTimeDate').datepicker({ dateFormat: 'yy-mm-dd' });
        $('[data-mask]').inputmask();
        $('.timepicker').timepicker({
            showMeridian: false
        });
    });

    $('#btnCreate').on('click', function (event) {
        var inputValid = true;
        var errMsg = '';

        if ($('#incidentSystemITSystem_LevelOfSeverity').val() == '') {
            inputValid = false;
            errMsg = errMsg + 'Level Of Severity is required<br />';
        }

        if ($('#incidentSystemITSystem_PossibleCause').val() == '') {
            inputValid = false;
            errMsg = errMsg + '\r\nPossible Cause is required<br />';
        }

        if ($('#incidentSystemITSystem_AffectedSystem').val() == '') {
            inputValid = false;
            errMsg = errMsg + '\r\nAffected System Time is required<br />';
        }

        if ($('#incidentSystemITSystem_AffectedArea').val() == '') {
            inputValid = false;
            errMsg = errMsg + '\r\nAffected Area is required<br />';
        }

        if ($('#incidentSystemITSystem_ExpectedRestorationTIme').val() == '') {
            inputValid = false;
            errMsg = errMsg + '\r\nExpected Restoration Time is required<br />';
        }

        if ($('#incidentSystemITSystem_FullRestoration').val() == '') {
            inputValid = false;
            errMsg = errMsg + '\r\nFull Restoration is required<br />';
        }

        if (inputValid == false) {
            $('#CCCPModal').find('.modal-body').html(errMsg);
            $('#CCCPModal').find('.modal-title').html('Create Error');
            $('#CCCPModal').modal('toggle');

            event.preventDefault();
        }

        return inputValid;
    });
</script>
}
