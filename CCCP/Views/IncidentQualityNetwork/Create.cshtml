@model CCCP.Business.Model.IncidentQualityNetworkModel

@using CCCP.Common
@using CCCP.Business.Service
@{
    ViewBag.Title = Resources.global.Menu_IncidentQualityNetwork;
    CCCP.ViewModel.IncidentQualityNetwork incidentQualityNetwork = Model.Entity; // variable for binding
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        <i class="fa fa-clipboard"></i> @Resources.global.Menu_IncidentManagement - @Resources.global.Func_Create @Resources.global.Menu_IncidentQualityNetwork
    </h1>
</section>

<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-lg-12">
            <div class="box box-primary">
                <div class="box-body">
                    @using (Html.BeginForm("Create", "IncidentQualityNetwork"))
                    {
                        @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="panel-group">
                        <div class="panel panel-default">
                            <div class="panel panel-body">
                                @*<div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.LevelOfSeverity)</label></div>
                                    <div class="col-lg-4">
                                        <select id="incidentQualityNetwork_LevelOfSeverity" name="incidentQualityNetwork.LevelOfSeverity" class="form-control thin-control">
                                            <option value=""></option>
                                            @foreach (IncidentLevel one in Enum.GetValues(typeof(IncidentLevel)))
                                            {
                                                if (one != IncidentLevel.None)
                                                {
                                                    <option value="@(Convert.ToInt32(one))">@one.ToEnumString()</option>
                                                }
                                            }
                                        </select>
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.LevelOfSeverity, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.IncidentBackground)</label></div>
                                    <div class="col-lg-4">
                                        @Html.EditorFor(model => incidentQualityNetwork.IncidentBackground, new { htmlAttributes = new { @class = "form-control", @style = "height:150px" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.IncidentBackground, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentQualityNetwork.IsDrillMode)</label></div>
                                    <div class="col-lg-4">
                                        <div class="checkbox">
                                            <input id="incidentQualityNetwork_IsDrillMode" name="incidentQualityNetwork.IsDrillMode" type="checkbox" value="" style="top:-10px; left: 20px" />
                                            @Html.ValidationMessageFor(model => incidentQualityNetwork.IsDrillMode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="panel panel-primary">
                            <div class="panel panel-heading"><label>@Resources.global.Label_Details</label></div>
                            <div class="panel panel-body">

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.AffectedArea)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.AffectedArea, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.AffectedArea, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.OutageStartTime)</label></div>
                                    <div class="col-lg-6">
                                        <div class="col-lg-6">
                                            <div class="input-group">
                                                <div class="input-group-addon">
                                                    <i class="fa fa-calendar"></i>
                                                </div>
                                                <input type="text" class="form-control" id="OutageStartTimeDate" data-inputmask="'alias': 'yyyy-mm-dd'" data-mask></input>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            <div class="input-group bootstrap-timepicker">
                                                <div class="input-group-addon">
                                                    <i class="fa fa-clock-o"></i>
                                                </div>
                                                <input type="text" class="form-control timepicker" id="OutageStartTimeTime" data-inputmask="'alias': 'HH:mm'" data-mask></input>
                                            </div>
                                        </div>
                                        @Html.HiddenFor(model => incidentQualityNetwork.OutageStartTime)
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.OutageStartTime, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                @*<div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.FullRestoration)</label></div>
                                    <div class="col-lg-6">
                                        <div class="col-lg-6">
                                            <div class="input-group">
                                                <div class="input-group-addon">
                                                    <i class="fa fa-calendar"></i>
                                                </div>
                                                <input type="text" class="form-control" id="FullRestorationDate" data-inputmask="'alias': 'yyyy-mm-dd'" data-mask></input>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            <div class="input-group bootstrap-timepicker">
                                                <div class="input-group-addon">
                                                    <i class="fa fa-clock-o"></i>
                                                </div>
                                                <input type="text" class="form-control timepicker" id="FullRestorationTime" data-inputmask="'alias': 'HH:mm'" data-mask></input>
                                            </div>
                                        </div>
                                        @Html.HiddenFor(model => incidentQualityNetwork.FullRestoration)
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.FullRestoration, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.NoOfBuilding)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.NoOfBuilding, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.NoOfBuilding, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.NoOfCustomerAffected)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.NoOfCustomerAffected, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.NoOfCustomerAffected, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.NoOfPlatinumCustomer)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.NoOfPlatinumCustomer, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.NoOfPlatinumCustomer, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.NoOfDiamondCustomer)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.NoOfDiamondCustomer, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.NoOfDiamondCustomer, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.NoOfGoldCustomer)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.NoOfGoldCustomer, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.NoOfGoldCustomer, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.NoOfSilverCustomer)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.NoOfSilverCustomer, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.NoOfSilverCustomer, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.PossibleCause)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.PossibleCause, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.PossibleCause, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.ExpectedRestorationTime)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.ExpectedRestorationTime, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.ExpectedRestorationTime, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label class="mandatory-field">@Html.DisplayNameFor(model => incidentQualityNetwork.RestorationMethod)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.RestorationMethod, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.RestorationMethod, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentQualityNetwork.StatusUpdate)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.StatusUpdate, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.StatusUpdate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentQualityNetwork.RootCause)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.RootCause, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.RootCause, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentQualityNetwork.LossGeneration)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.LossGeneration, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.LossGeneration, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentQualityNetwork.LossInterconnection)</label></div>
                                    <div class="col-lg-6">
                                        <select id="incidentQualityNetwork_LossInterconnection" name="incidentQualityNetwork.LossInterconnection" class="form-control thin-control">
                                            <option value=""></option>
                                            @foreach (string one in Model.Options_LossInterconnection)
                                            {
                                                <option value="@one">@one</option>
                                            }
                                        </select>
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.LossInterconnection, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentQualityNetwork.LossTransmission)</label></div>
                                    <div class="col-lg-6">
                                        <select id="incidentQualityNetwork_LossTransmission" name="incidentQualityNetwork.LossTransmission" class="form-control thin-control">
                                            <option value=""></option>
                                            @foreach (string one in Model.Options_LossTransmission)
                                            {
                                                <option value="@one">@one</option>
                                            }
                                        </select>
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.LossTransmission, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentQualityNetwork.MVOutage)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.MVOutage, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.MVOutage, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentQualityNetwork.IsDoubleFault)</label></div>
                                    <div class="col-lg-4">
                                        <div class="checkbox">
                                            <input id="incidentQualityNetwork_IsDoubleFault" name="incidentQualityNetwork.IsDoubleFault" type="checkbox" value="" style="top:-10px; left: 20px" />
                                            @Html.ValidationMessageFor(model => incidentQualityNetwork.IsDoubleFault, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentQualityNetwork.LVOutage)</label></div>
                                    <div class="col-lg-6">
                                        @Html.EditorFor(model => incidentQualityNetwork.LVOutage, new { htmlAttributes = new { @class = "form-control thin-control" } })
                                        @Html.ValidationMessageFor(model => incidentQualityNetwork.LVOutage, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentQualityNetwork.IsPQEventAffectLargeCustomer)</label></div>
                                    <div class="col-lg-4">
                                        <div class="checkbox">
                                            <input id="incidentQualityNetwork_IsPQEventAffectLargeCustomer" name="incidentQualityNetwork.IsPQEventAffectLargeCustomer" type="checkbox" value="" style="top:-10px; left: 20px" />
                                            @Html.ValidationMessageFor(model => incidentQualityNetwork.IsPQEventAffectLargeCustomer, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3 text-right"><label>@Html.DisplayNameFor(model => incidentQualityNetwork.IsCriticalPoint)</label></div>
                                    <div class="col-lg-4">
                                        <div class="checkbox">
                                            <input id="incidentQualityNetwork_IsCriticalPoint" name="incidentQualityNetwork.IsCriticalPoint" type="checkbox" value="" style="top:-10px; left: 20px" />
                                            @Html.ValidationMessageFor(model => incidentQualityNetwork.IsCriticalPoint, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @Html.HiddenFor(model => incidentQualityNetwork.IncidentQualityNetworkId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentQualityNetwork.ChecklistBatchId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentQualityNetwork.ChatRoomId, new { @Value = 0 })
                    @Html.HiddenFor(model => incidentQualityNetwork.GeneralEnquiryId, new { @Value = incidentQualityNetwork.GeneralEnquiryId })
                    @Html.HiddenFor(model => incidentQualityNetwork.OMSEventId, new { @Value = incidentQualityNetwork.OMSEventId })
                    @Html.HiddenFor(model => incidentQualityNetwork.CrisisId)
                    @Html.HiddenFor(model => incidentQualityNetwork.IssueById)
                    @Html.HiddenFor(model => incidentQualityNetwork.IssueDateTime)
                    @Html.HiddenFor(model => incidentQualityNetwork.CloseById)
                    @Html.HiddenFor(model => incidentQualityNetwork.CloseDateTime)
                    @Html.HiddenFor(model => incidentQualityNetwork.IncidentNo)
                    @Html.HiddenFor(model => incidentQualityNetwork.IncidentStatus)
                    @Html.HiddenFor(model => incidentQualityNetwork.CreatedBy)
                    @Html.HiddenFor(model => incidentQualityNetwork.CreatedDateTime)
                    @Html.HiddenFor(model => incidentQualityNetwork.LastUpdatedBy)
                    @Html.HiddenFor(model => incidentQualityNetwork.LastUpdatedDateTime)

                    <div class="box-footer">
                        <div class="form-group">
                            <button class="btn btn-primary" type="submit" id="btnCreate">@Resources.global.Func_Create</button>
                            <button class="btn btn-primary" type="button" onclick="window.location = '@Url.Action("Index", "IncidentQualityNetwork")';">@Resources.global.Func_Cancel</button>
                        </div>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $("#incidentQualityNetwork_IsDrillMode").on("click", function () {
            $(this).val(this.checked);
        });
        
        $("#incidentQualityNetwork_IsDoubleFault").on("click", function () {
            $(this).val(this.checked);
        });
        
        $("#incidentQualityNetwork_IsPQEventAffectLargeCustomer").on("click", function () {
            $(this).val(this.checked);
        });
        
        $("#incidentQualityNetwork_IsCriticalPoint").on("click", function () {
            $(this).val(this.checked);
        });

        $("#FullRestorationDate").change(function () {
            $("#incidentQualityNetwork_FullRestoration").val($("#FullRestorationDate").val() + " " + $("#FullRestorationTime").val());
        });

        $("#FullRestorationTime").change(function () {
            $("#incidentQualityNetwork_FullRestoration").val($("#FullRestorationDate").val() + " " + $("#FullRestorationTime").val());
        });

        $("#OutageStartTimeDate").change(function () {
            $("#incidentQualityNetwork_OutageStartTime").val($("#OutageStartTimeDate").val() + " " + $("#OutageStartTimeTime").val());
        });

        $("#OutageStartTimeTime").change(function () {
            $("#incidentQualityNetwork_OutageStartTime").val($("#OutageStartTimeDate").val() + " " + $("#OutageStartTimeTime").val());
        });

        $(document).ready(function () {
            $("#incidentQualityNetwork_IsDrillMode").val($("#incidentQualityNetwork_IsDrillMode").checked);
            $("#incidentQualityNetwork_IsDoubleFault").val($("#incidentQualityNetwork_IsDoubleFault").checked);
            $("#incidentQualityNetwork_IsPQEventAffectLargeCustomer").val($("#incidentQualityNetwork_IsPQEventAffectLargeCustomer").checked);
            $("#incidentQualityNetwork_IsCriticalPoint").val($("#incidentQualityNetwork_IsCriticalPoint").checked);

            $('#FullRestorationDate').datepicker({ dateFormat: 'yy-mm-dd' }).datepicker('setDate', '@(incidentQualityNetwork.FullRestoration == null ? "" : incidentQualityNetwork.FullRestoration.Value.ToString("yyyy-MM-dd"))');
            $('#OutageStartTimeDate').datepicker({ dateFormat: 'yy-mm-dd' }).datepicker('setDate', '@(incidentQualityNetwork.OutageStartTime == null ? "" : incidentQualityNetwork.OutageStartTime.Value.ToString("yyyy-MM-dd"))');
            $('[data-mask]').inputmask();
            $('#FullRestorationTime').timepicker({
                showMeridian: false,
                defaultTime: '@(incidentQualityNetwork.FullRestoration == null ? "" : incidentQualityNetwork.FullRestoration.Value.ToString("HH:mm"))',
                hour: '@(incidentQualityNetwork.FullRestoration == null ? "" : incidentQualityNetwork.FullRestoration.Value.ToString("HH"))',
                minute: '@(incidentQualityNetwork.FullRestoration == null ? "" : incidentQualityNetwork.FullRestoration.Value.ToString("mm"))',
            });

            $('#OutageStartTimeTime').timepicker({
                showMeridian: false,
                defaultTime: '@(incidentQualityNetwork.OutageStartTime == null ? "" : incidentQualityNetwork.OutageStartTime.Value.ToString("HH:mm"))',
                hour: '@(incidentQualityNetwork.OutageStartTime == null ? "" : incidentQualityNetwork.OutageStartTime.Value.ToString("HH"))',
                minute: '@(incidentQualityNetwork.OutageStartTime == null ? "" : incidentQualityNetwork.OutageStartTime.Value.ToString("mm"))',
            });
        });

        $('#btnCreate').on('click', function (event) {
            var inputValid = true;
            var errMsg = '';

            if ($('#incidentQualityNetwork_IncidentBackground').val() == '') {
                inputValid = false;
                errMsg = errMsg + 'Incident Background is required<br />';
            }

            if ($('#incidentQualityNetwork_AffectedArea').val() == '') {
                inputValid = false;
                errMsg = errMsg + '\r\nAffected Area is required<br />';
            }

            if ($("#OutageStartTimeDate").val() == '' || $("#OutageStartTimeTime").val() == '') {
                inputValid = false;
                errMsg = errMsg + '\r\nOutage Start Time cannot be empty<br />';
            }

            //if ($("#FullRestorationDate").val() == '' || $("#FullRestorationTime").val() == '') {
            //    inputValid = false;
            //    errMsg = errMsg + '\r\Full Restoration is required<br />';
            //}

            if ($('#incidentQualityNetwork_NoOfBuilding').val() == '') {
                inputValid = false;
                errMsg = errMsg + '\r\nNo Of Building is required<br />';
            }

            if ($('#incidentQualityNetwork_NoOfCustomerAffected').val() == '') {
                inputValid = false;
                errMsg = errMsg + '\r\nNo Of Customer Affected is required<br />';
            }

            if ($('#incidentQualityNetwork_NoOfPlatinumCustomer').val() == '') {
                inputValid = false;
                errMsg = errMsg + '\r\nNo Of Platinum Customer is required<br />';
            }

            if ($('#incidentQualityNetwork_NoOfDiamondCustomer').val() == '') {
                inputValid = false;
                errMsg = errMsg + '\r\nNo Of Diamond Customer is required<br />';
            }

            if ($('#incidentQualityNetwork_NoOfGoldCustomer').val() == '') {
                inputValid = false;
                errMsg = errMsg + '\r\nNo Of Gold Customer is required<br />';
            }

            if ($('#incidentQualityNetwork_NoOfSilverCustomer').val() == '') {
                inputValid = false;
                errMsg = errMsg + '\r\nNo Of Silver Customer is required<br />';
            }

            if ($('#incidentQualityNetwork_PossibleCause').val() == '') {
                inputValid = false;
                errMsg = errMsg + '\r\nPossible Cause is required<br />';
            }

            if ($('#incidentQualityNetwork_ExpectedRestorationTime').val() == '') {
                inputValid = false;
                errMsg = errMsg + '\r\nExpected Restoration Time is required<br />';
            }

            if ($('#incidentQualityNetwork_RestorationMethod').val() == '') {
                inputValid = false;
                errMsg = errMsg + '\r\nRestoration Method is required<br />';
            }

            if (inputValid == false) {
                $('#CCCPModal').find('.modal-body').html(errMsg);
                $('#CCCPModal').find('.modal-title').html('Create Error');
                $('#CCCPModal').modal('toggle');

                event.preventDefault();
            }

            return inputValid;
        });
</script>
}
